---
# roles/terminal_setup/tasks/manage_binaries.yml
# Included from main.yml for each tool where install_type == 'binary'

- name: "Manage binary for {{ tool.name }}"
  block:
    - name: "Set platform-specific binary facts for {{ tool.name }}"
      ansible.builtin.set_fact:
        tool_os: "{{ ansible_system | lower }}"
        tool_arch: "{{ ansible_architecture_normalized }}"
        tool_version: "{{ tool.version }}"
        tool_executable: "{{ tool.executable_name | default(tool.name) }}"
        tool_bin_path: "{{ role_path }}/files/{{ ansible_system | lower }}/{{ ansible_architecture_normalized }}/{{ tool.name }}/{{ tool.version }}/{{ tool.executable_name | default(tool.name) }}-{{ tool.version }}"
        tool_dest_path: "{{ ansible_user_dir }}/.local/bin/{{ tool.executable_name | default(tool.name) }}"

    - name: "Check if pre-downloaded binary exists for {{ tool.name }}"
      ansible.builtin.stat:
        path: "{{ tool_bin_path }}"
      register: tool_bin_stat

    - name: Show tool_bin_stat
      ansible.builtin.debug:
        var: tool_bin_stat

    - name: "Fail if binary is not present for {{ tool.name }} on {{ tool_os }}/{{ tool_arch }}"
      ansible.builtin.fail:
        msg: |
          Binary for {{ tool.name }} (version {{ tool_version }}) not found at {{ tool_bin_path }}.
          Please run the download helper or place the binary manually.
      when: not tool_bin_stat.stat.exists

    - name: Show paths before copy
      ansible.builtin.debug:
        msg:
          - "ansible_user_dir: {{ ansible_user_dir }}"
          - "tool_bin_path: {{ tool_bin_path }}"
          - "tool_dest_path: {{ tool_dest_path }}"

    - name: "Copy {{ tool.name }} binary to user's bin directory"
      ansible.builtin.copy:
        src: "{{ tool_bin_path }}"
        dest: "{{ tool_dest_path }}"
        mode: '0755'
      register: tool_copy_result
      when: tool_bin_stat.stat.exists

    - name: Show result of copy
      ansible.builtin.debug:
        var: tool_copy_result
      when: tool_bin_stat.stat.exists

    - name: Check if binary exists at destination after copy
      ansible.builtin.stat:
        path: "{{ tool_dest_path }}"
      register: tool_dest_stat

    - name: Show tool_dest_stat
      ansible.builtin.debug:
        var: tool_dest_stat

    # - name: "Remove binary for {{ tool.name }} if absent"
    #   ansible.builtin.file:
    #     path: "{{ tool_dest_path }}"
    #     state: absent
    #   # when: (tool.state | default('present')) == 'absent' (no absent tools currently supported)
