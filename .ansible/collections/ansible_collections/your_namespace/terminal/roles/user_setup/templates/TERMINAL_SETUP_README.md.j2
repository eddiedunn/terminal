{# Ansible managed: {{ ansible_managed }} #}
# Terminal Setup (Managed by Ansible)

> **NOTE:** This README is generated by Ansible and reflects only the features enabled for this system. The setup is fully configurable—see the [terminal_setup role README](https://github.com/oreillyauto/gdunn6_ansible/tree/main/roles/terminal_setup) for options and documentation.

This system's shell environment is managed via the `terminal_setup` Ansible role. All changes are userland only (no sudo/root required).

## Installed Components
{% for tool in terminal_setup_tools_processed %}
{%- if tool is defined and (tool.state | default('present')) == 'present' %}- **{{ tool.name | default('Dotfile') | title if tool is defined and tool.name is defined else 'Dotfile' }}**: {{ tool.description | default('No description available') if tool is defined and tool.description is defined else '' }}
{%- endif %}
{%- endfor %}
- **.bash_aliases**: Populated with useful aliases for all installed tools and common admin tasks, and sourced automatically in every session by the managed shell config block.

{% for tool_item in terminal_setup_tools_processed %}{% if tool_item.name == 'fzf' and tool_item.state == 'present' %}
## fzf Bash History Search (allhist function)
If enabled, an `allhist` function is added to your shell, letting you search all users' bash history with fzf (with preview and copy-to-clipboard):

```bash
allhist() {
    sudo grep -H . "$HOME"/../*/.bash_history 2>/dev/null | \
    sed 's|.*/\([^/]*\)/.bash_history:|\1: |' | \
    fzf --preview 'echo {}' \
        --bind 'ctrl-y:execute-silent(echo -n {2..} | xclip -selection clipboard)+abort'
}
```

**What those extra features do:**

- `--preview 'echo {}'`: Shows a preview window (usually on the right side of fzf). `{}` is replaced with the currently highlighted line. In this case it just echoes the same line, but you could do more complex things like syntax highlighting.
- `--bind 'ctrl-y:execute-silent(...)+abort'`: This creates a keyboard shortcut:
    - `ctrl-y` = the key combination to trigger this action
    - `execute-silent(...)` = runs a command without showing output
    - `echo -n {2..}` = prints everything from the 2nd field onward (skipping the username prefix)
    - `| xclip -selection clipboard` = copies to your system clipboard
    - `+abort` = exits fzf after copying

So when you press Ctrl+Y on a highlighted command, it:
1. Strips off the "username: " part
2. Copies just the command to your clipboard
3. Exits fzf

**Example:**
If you highlight `alice: docker ps -a`, pressing Ctrl+Y copies just `docker ps -a` to your clipboard and exits.
{% endif %}{% endfor %}

{% for tool_item in terminal_setup_tools_processed %}{% if tool_item.name == 'direnv' and tool_item.state == 'present' %}
## direnv Integration
If enabled, direnv will be installed and the following snippet is added to your shell config:

```bash
if command -v direnv >/dev/null 2>&1; then
  eval "$(direnv hook bash)"
fi
```

This enables automatic loading/unloading of environment variables as you `cd` into directories containing an `.envrc` file, making per-project environment management seamless and secure.
{% endif %}{% endfor %}

{% for tool_item in terminal_setup_tools_processed %}{% if tool_item.name == 'zoxide' and tool_item.state == 'present' %}
## zoxide Integration
If enabled, zoxide is installed and initialized in your shell config for smarter, faster directory jumping:

```bash
if command -v zoxide >/dev/null 2>&1; then
  eval "$(zoxide init bash)"
fi
```

Use `z` to jump to frequently visited directories quickly.
{% endif %}{% endfor %}

{% for tool_item in terminal_setup_tools_processed %}{% if tool_item.name == 'bat' and tool_item.state == 'present' %}
## bat Integration
If enabled, `bat` is available as a modern replacement for `cat` with syntax highlighting. Use `bat <file>` to view files with colorized output.
{% endif %}{% endfor %}

{% for tool_item in terminal_setup_tools_processed %}{% if tool_item.name == 'eza' and tool_item.state == 'present' %}
## eza Integration
If enabled, `eza` is available as a modern, feature-rich replacement for `ls`. Use `eza` in place of `ls` for enhanced directory listings.
{% endif %}{% endfor %}

{% for tool_item in terminal_setup_tools_processed %}{% if tool_item.name == 'starship' and tool_item.state == 'present' %}
## Starship Prompt
If enabled, Starship provides a fast, highly customizable shell prompt. Configuration is managed in `~/.config/starship.toml`.
{% endif %}{% endfor %}

{% for tool_item in terminal_setup_tools_processed %}{% if tool_item.name == 'sheldon' and tool_item.state == 'present' %}
## Sheldon Plugin Manager
If enabled, Sheldon manages shell plugins for Bash/Zsh. Configuration is managed in `~/.config/sheldon/plugins.toml`.
{% endif %}{% endfor %}

{% for tool_item in terminal_setup_tools_processed %}{% if tool_item.name == 'rustup' and tool_item.state == 'present' %}
## Rust Development Environment
If enabled, `rustup` is installed, providing the `cargo` build tool and `rustc` compiler. The role ensures `~/.cargo/bin` is in your `PATH`, so all Rust tooling is available in your shell. Use `rustup update` to keep your toolchain current.
{% endif %}{% endfor %}

## How it works
- All binaries are installed to: `~/.local/bin/`
- All config files are in: `~/.config/`
- Your `~/.bashrc`/`~/.zshrc` sources a snippet to initialize Starship, Sheldon, nvm, pyenv, and set up environment variables for context-aware prompt coloring.
- If nvm or pyenv are enabled, the role installs all required dependencies using apt (Debian/Ubuntu) or homebrew (macOS), then installs nvm/pyenv to the user's home directory, and injects the correct shell initialization block.
- Use `nvm install <version>`/`nvm use <version>` and `pyenv install <version>`/`pyenv global <version>` as needed in your shell.

## Backups
- Any shell config file changed by this role is backed up to `~/backup/` with a timestamp.
- Only the 4 most recent backups are kept per file.

## Updating/Removing
- To update CLI tools or configs, re-run the Ansible role.
- To remove, delete the binaries from `~/.local/bin/` and remove related lines from your shell config.

## Customization
- To add more Bash plugins, edit `~/.config/sheldon/plugins.toml`.
- To customize the prompt, edit `~/.config/starship.toml`.
- For lifecycle/auth context coloring, set the `LIFECYCLE` and `AUTH_CONTEXT` env vars in your shell config.

---

## Security Justification for Each Tool

| Tool      | Purpose & Security Justification |
|-----------|----------------------------------|
{% for tool_item in terminal_setup_tools_processed %}{% if tool_item.state == 'present' %}
{% if tool_item.name == 'starship' %}| **Starship** | {{ tool_item.description | default('Provides a modern, informative shell prompt. Does not require elevated privileges. Open-source, widely audited, and does not interact with sensitive system resources.') }} |
{% elif tool_item.name == 'sheldon' %}| **Sheldon** | {{ tool_item.description | default('Manages shell plugins for Bash/Zsh in user space. No root required. All plugins are user-reviewed and sourced from official repositories.') }} |
{% elif tool_item.name == 'fzf' %}| **fzf**      | {{ tool_item.description | default('Command-line fuzzy finder to improve productivity. Open-source, with a strong security record. Runs as the current user only.') }} |
{% elif tool_item.name == 'bat' %}| **bat**      | {{ tool_item.description | default('Modern replacement for `cat` with syntax highlighting. Does not modify files or system state. Open-source and widely used.') }} |
{% elif tool_item.name == 'eza' %}| **eza**      | {{ tool_item.description | default('Modern replacement for `ls` with enhanced features. Does not require root or modify system files. Open-source.') }} |
{% elif tool_item.name == 'nvm' %}| **nvm**      | {{ tool_item.description | default('Userland Node.js version manager. Installs only to user\'s home, no root required. Widely used and open-source.') }} |
{% elif tool_item.name == 'pyenv' %}| **pyenv**    | {{ tool_item.description | default('Userland Python version manager. Installs only to user\'s home, no root required. Widely used and open-source.') }} |
{% elif tool_item.name == 'direnv' %}| **direnv**   | {{ tool_item.description | default('Loads/unloads environment variables per directory based on `.envrc` files. Runs as user, never escalates privileges, and is widely used for safe project-level environment management.') }} |
{% elif tool_item.name == 'ripgrep' %}| **ripgrep** | {{ tool_item.description | default('A fast, recursive search tool. Does not modify files and runs as the current user. Open-source and widely trusted.') }} |
{% elif tool_item.name == 'uv' %}| **uv** | {{ tool_item.description | default('A fast Python package manager. Runs as the current user and manages Python environments locally. Open-source and developed by a trusted source (Astral).') }} |
{% elif tool_item.name == 'rustup' %}| **rustup** | {{ tool_item.description | default('The official Rust toolchain installer. Installs Rust tools (`cargo`, `rustc`) into user space. Does not require root. Open-source and maintained by the Rust project.') }} |
{% else %}| **{{ tool_item.name | title }}** | {{ tool_item.description | default('No specific security justification provided in template; see tool documentation.') }} |
{% endif %}{% endif %}{% endfor %}
**General Security Practices:**
- All binaries are downloaded from official GitHub releases and verified by checksum (see automation).
- No root privileges are required at any stage.
- All changes are restricted to the user’s home directory, with no impact on system-wide configuration.
- Backups and configuration changes are fully auditable and reversible.
- This setup is designed for portability and reproducibility, minimizing risk of misconfiguration or privilege escalation.

Questions? See your Ansible administrator or check the role documentation.
