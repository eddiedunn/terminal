---
# defaults file for eddiedunn.terminal.tool_installer
# This is the SINGLE SOURCE OF TRUTH for all tool definitions.

# This map defines the destination directories for shell completion files.
# The paths are created and managed by the 'env_chassis' role.
tool_installer_completion_dirs_map:
  bash: ".bash_completion.d"
  zsh: ".zsh/completions"
  fish: ".config/fish/completions"

# Path to the artifact cache on the controller.
# Can be overridden by the TERMINAL_ANSIBLE_ARTIFACTS_DIR environment variable.
tool_installer_artifact_cache_dir: "{{ lookup('env', 'TERMINAL_ANSIBLE_ARTIFACTS_DIR') | default('/tmp/terminal-ansible-artifacts', true) }}"

# List of tools to install. Intended to be overridden by the calling 'profile' role.
tool_installer_tools: []

# List of shells to install for. Intended to be overridden by the calling 'profile' role.
tool_installer_shells:
  - bash
  - zsh
  - fish

# Canonical list of all supported tool definitions.
# NOTE: For any tool that requires a shell hook (e.g. 'eval', 'source', 'export') to be functional, you MUST add an 'init_snippet' key to its definition. This enables the tool_installer role to generate the correct shell init scripts.
tool_installer_all_definitions:
  - name: starship
    version: "1.23.0"
    description: "The minimal, blazing-fast, and infinitely customizable prompt for any shell."
    install_type: binary
    # Shell init snippet for prompt using STARSHIP_CONFIG env var (for v1.23.0 compatibility)
    init_snippet: |
      export STARSHIP_CONFIG="{{ ansible_user_dir }}/.config/starship.toml"
      eval "$(starship init {shell_type_resolved})"
    binaries:
      Darwin:
        aarch64:
          url: "https://github.com/starship/starship/releases/download/v1.23.0/starship-aarch64-apple-darwin.tar.gz"
          executable_in_archive: "starship"
    dependencies: {}

  - name: ripgrep
    version: '13.0.0-13'
    install_type: binary
    aliases:
      grep: ripgrep
    binaries:
      Darwin:
        aarch64:
          url: "https://github.com/microsoft/ripgrep-prebuilt/releases/download/v13.0.0-13/ripgrep-v13.0.0-13-aarch64-apple-darwin.tar.gz"
          executable_in_archive: "rg"
      Linux:
        x86_64:
          url: "https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep-13.0.0-x86_64-unknown-linux-musl.tar.gz"
          executable_in_archive: "rg"
        aarch64:
          url: "https://github.com/microsoft/ripgrep-prebuilt/releases/download/v13.0.0-13/ripgrep-v13.0.0-13-aarch64-unknown-linux-gnu.tar.gz"
          executable_in_archive: "rg"
    dependencies: {}

  - name: sheldon
    version: "0.8.2"
    install_type: binary
    # Shell init snippet for plugin manager
    init_snippet: 'eval "$(sheldon source)"'
    binaries:
      Darwin:
        aarch64:
          url: "https://github.com/rossmacarthur/sheldon/releases/download/0.8.2/sheldon-0.8.2-aarch64-apple-darwin.tar.gz"
          executable_in_archive: "sheldon"
    dependencies: {}

  - name: fzf
    version: "0.62.0"
    install_type: binary
    # Shell init snippets for fzf keybindings and completions
    # Shell init snippets for fzf. Keybindings need to be sourced manually.
    # Completions are picked up automatically by shells from their standard directories.
    init_snippet: |
      # Source fzf key bindings for Bash
      [ -f "{{ ansible_user_dir }}/.bash_completion.d/fzf-key-bindings.bash" ] && source "{{ ansible_user_dir }}/.bash_completion.d/fzf-key-bindings.bash"
    init_snippet_zsh: |
      # Add fzf's completions to Zsh's fpath
      fpath=("{{ ansible_user_dir }}/.zsh/completions" $fpath)
      # Source fzf key bindings for Zsh
      [ -f "{{ ansible_user_dir }}/.zsh/completions/fzf-key-bindings.zsh" ] && source "{{ ansible_user_dir }}/.zsh/completions/fzf-key-bindings.zsh"
    binaries:
      Darwin:
        aarch64:
          url: "https://github.com/junegunn/fzf/releases/download/v0.62.0/fzf-0.62.0-darwin_arm64.tar.gz"
          executable_in_archive: "fzf"
      Linux:
        aarch64:
          url: "https://github.com/junegunn/fzf/releases/download/v0.62.0/fzf-0.62.0-linux_arm64.tar.gz"
          executable_in_archive: "fzf"
    dependencies: {}

  - name: bat
    version: "0.25.0"
    install_type: binary
    binaries:
      Darwin:
        aarch64:
          url: "https://github.com/sharkdp/bat/releases/download/v0.25.0/bat-v0.25.0-aarch64-apple-darwin.tar.gz"
          executable_in_archive: "bat"
    dependencies: {}

  - name: eza
    version: "0.21.4"
    install_type: binary
    binaries:
      Darwin:
        aarch64:
          url: "https://github.com/eddiedunn/eza/releases/download/v0.21.4-darwin/eza"
          executable_in_archive: "eza"
    dependencies: {}

  - name: zoxide
    version: "0.9.8"
    install_type: binary
    # Shell init snippets for zoxide
    init_snippet: 'eval "$(zoxide init {shell_type_resolved} --cmd z)"'
    init_snippet_zsh: 'eval "$(zoxide init zsh --cmd z)"'
    binaries:
      Darwin:
        aarch64:
          url: "https://github.com/ajeetdsouza/zoxide/releases/download/v0.9.8/zoxide-0.9.8-aarch64-apple-darwin.tar.gz"
          executable_in_archive: "zoxide"
    dependencies: {}

  - name: direnv
    version: "2.33.0"
    install_type: binary
    # Shell init snippet for direnv
    init_snippet: 'eval "$(direnv hook {shell_type_resolved})"'
    binaries:
      Darwin:
        aarch64:
          url: "https://github.com/direnv/direnv/releases/download/v2.33.0/direnv.darwin-arm64"
          executable_in_archive: "direnv"
    dependencies: {}

  - name: uv
    version: "0.7.13"
    install_type: binary
    binaries:
      Darwin:
        aarch64:
          url: "https://github.com/astral-sh/uv/releases/download/0.7.13/uv-aarch64-apple-darwin.tar.gz"
          executable_in_archive: "uv"
    dependencies: {}

  - name: go
    version: "1.22.5"
    description: "The Go programming language."
    install_type: script
    dependencies:
      Darwin:
        - gnu-tar

  - name: nvm
    version: "v0.40.3"
    description: "Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions."
    install_type: script
    git_repo: "https://github.com/nvm-sh/nvm.git"
    dependencies:
      Debian:
        - build-essential
        - libssl-dev
      Darwin:
        - xz

  # ... (other script tools like pyenv, rustup, etc. with their dependencies)
