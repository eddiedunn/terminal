---
# Assert that the required binary definition exists for this platform/arch
- name: "Assert that a binary definition exists for this platform/arch for {{ tool.name }}"
  ansible.builtin.assert:
    that:
      - tool.binaries is defined
      - tool.binaries[ansible_system] is defined
      - tool.binaries[ansible_system][ansible_architecture_normalized] is defined
    fail_msg: "No binary definition found for {{ tool.name }} on {{ ansible_system }}/{{ ansible_architecture_normalized }}"

- name: "Set platform-specific binary facts for {{ tool.name }}"
  ansible.builtin.set_fact:
    tool_bin_src: >-
      {{ [
        tool_installer_artifact_cache_dir | default('/tmp/terminal-ansible-artifacts'),
        ansible_system | lower,
        ansible_architecture_normalized,
        tool.name,
        tool.version,
        (tool.executable_name | default(tool.name)) ~ '-' ~ tool.version
      ] | path_join }}
    tool_bin_dest_versioned: >-
      {{ [
        ansible_user_dir,
        '.local',
        'bin',
        (tool.executable_name | default(tool.name)) ~ '-' ~ tool.version
      ] | path_join }}
    tool_bin_dest_unversioned: >-
      {{ [
        ansible_user_dir,
        '.local',
        'bin',
        tool.executable_name | default(tool.name)
      ] | path_join }}




- name: "Ensure destination directory exists for {{ tool.name }}"
  ansible.builtin.file:
    path: "{{ tool_bin_dest_versioned | dirname }}"
    state: directory
    mode: '0755'

- name: "Copy binary to user's bin directory for {{ tool.name }}"
  ansible.builtin.copy:
    src: "{{ tool_bin_src }}"
    dest: "{{ tool_bin_dest_versioned }}"
    mode: '0755'
    force: true
    remote_src: false

- name: "Create/update main symlink to point to versioned binary"
  ansible.builtin.file:
    src: "{{ tool_bin_dest_versioned }}"
    dest: "{{ tool_bin_dest_unversioned }}"
    state: link
    force: true

