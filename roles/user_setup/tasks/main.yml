---
# tasks/main.yml for your_namespace.terminal.user_setup
# Refactored for a clean, single execution flow.

# ---- 1. Pre-flight and Setup ----

- name: Process user_setup_tools into terminal_setup_tools_processed
  ansible.builtin.set_fact:
    terminal_setup_tools_processed: "{{ _processed_yaml | from_yaml }}"
  vars:
    _processed_yaml: |
      {%- set processed = [] -%}
      {%- set profile_tools = profile_tools | default([]) -%}
      {%- for tool_def in user_setup_tools -%}
        {%- set _ = processed.append(
            tool_def | combine({
              'state': 'present' if tool_def.name in profile_tools else 'absent'
            })
          ) -%}
      {%- endfor -%}
      {{ processed | to_yaml }}

- name: Set shell_type_resolved fact (platform-specific shell type)
  ansible.builtin.set_fact:
    shell_type_resolved: "{{ 'zsh' if ansible_os_family == 'Darwin' else user_setup_shell_type | default('bash') }}"

- name: Set terminal_setup_sheldon_plugins fact for template compatibility
  ansible.builtin.set_fact:
    terminal_setup_sheldon_plugins: "{{ user_setup_sheldon_plugins }}"

- name: Set terminal_setup_active_shells fact for completions logic
  ansible.builtin.set_fact:
    terminal_setup_active_shells: "{{ user_setup_shells | default(['zsh'] if ansible_os_family == 'Darwin' else ['bash']) }}"

- name: Set fzf_is_managed_by_sheldon fact for completions logic
  ansible.builtin.set_fact:
    fzf_is_managed_by_sheldon: >-
      {{
        'sheldon' in profile_tools and
        'fzf-zsh-plugin' in (terminal_setup_sheldon_plugins | map(attribute='name') | list)
      }}

- name: Set terminal_setup_bin_dir fact for symlink management
  ansible.builtin.set_fact:
    terminal_setup_bin_dir: "{{ user_setup_bin_dir }}"

- name: Set ansible_architecture_normalized fact for binary management
  ansible.builtin.set_fact:
    ansible_architecture_normalized: "{{ 'aarch64' if ansible_architecture in ['aarch64', 'arm64'] else 'x86_64' }}"


- name: Ensure backup directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/backup"
    state: directory
    mode: '0700'
  when: ansible_user_dir is defined

- name: Include backup and cleanup tasks for each configuration file
  ansible.builtin.include_tasks: backup_configs.yml
  loop:
    - ".bashrc"
    - ".zshrc"
    - ".zshenv"
    - ".vimrc"
    - ".gitconfig"
    - ".gitignore_global"
    - ".bash_aliases"
    - ".zsh_aliases"
    - ".config/starship.toml"
    - ".config/sheldon/plugins.toml"
  loop_control:
    loop_var: config_file

- name: Ensure base user directories exist
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - .local/bin
    - .local/src  # For script repos
    - .config
    - .config/sheldon

# ---- 3. Configuration Deployment ----

- name: Deploy general dotfiles
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ ansible_user_dir }}/{{ item.dest }}"
    mode: "0644"
  loop:
    - { src: "vimrc.j2", dest: ".vimrc" }
    - { src: "gitconfig.j2", dest: ".gitconfig" }
    - { src: "gitignore_global.j2", dest: ".gitignore_global" }
  loop_control:
    loop_var: item
    label: "{{ item.dest }}"

- name: Deploy tool-specific configuration files
  ansible.builtin.template:
    src: "{{ (tool.name == 'sheldon' and tool.config_file == 'plugins.toml') | ternary('sheldon_plugins.toml.j2', tool.config_file ~ '.j2') }}"
    dest: "{{ ansible_user_dir }}/.config/{{ tool.config_dir | default('') }}/{{ tool.config_file }}"
    mode: "0644"
  loop: >-
    {{ terminal_setup_tools_processed
      | selectattr('state', 'eq', 'present')
      | selectattr('config_file', 'defined')
      | selectattr('config_file', '!=', '')
      | list }}
  loop_control:
    loop_var: tool
    label: "{{ tool.config_file }}"

# ---- 4. Shell Integration ----

- name: Install shell completions for enabled tools
  ansible.builtin.include_tasks: manage_completions.yml

- name: Manage symlinks for staged binaries
  ansible.builtin.include_tasks: manage_symlinks.yml
  when: >-
    terminal_setup_tools_processed
    | selectattr('symlink_as', 'defined')
    | selectattr('state', 'eq', 'present')
    | list | length > 0

- name: Manage Bash initialization
  when: "'bash' in terminal_setup_active_shells"
  block:
    - name: Manage .bashrc
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        create: true
        mode: '0644'
        marker: "{{ user_setup_managed_block_marker }}"
        block: "{{ lookup('template', 'bashrc_snippet.j2') }}"
    - name: Manage .bash_aliases
      ansible.builtin.template:
        src: "bash_aliases_snippet.j2"
        dest: "{{ ansible_user_dir }}/.bash_aliases"
        mode: "0644"

- name: Manage Zsh initialization
  when: "'zsh' in terminal_setup_active_shells"
  block:
    - name: Manage .zshrc (for interactive shells)
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.zshrc"
        create: true
        mode: '0644'
        marker: "{{ user_setup_managed_block_marker }}"
        block: "{{ lookup('template', 'zshrc_snippet.j2') }}"
    - name: Manage .zshenv (for all shells)
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.zshenv"
        create: true
        mode: '0644'
        marker: "{{ user_setup_managed_block_marker }}"
        block: "{{ lookup('template', 'zshenv_snippet.j2') }}"
    - name: Manage .zsh_aliases
      ansible.builtin.template:
        src: "zsh_aliases_snippet.j2"
        dest: "{{ ansible_user_dir }}/.zsh_aliases"
        mode: "0644"
