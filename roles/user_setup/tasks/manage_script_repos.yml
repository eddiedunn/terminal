---
# tasks/manage_script_repos.yml
# Clones a user-defined script repository and synchronizes executable scripts as
# symlinks in ~/.local/bin, ensuring obsolete links are removed.

- name: Set facts for script repository
  ansible.builtin.set_fact:
    repo_src_path: "{{ ansible_user_dir }}/.local/src/{{ repo.name }}"
    repo_script_path: "{{ ansible_user_dir }}/.local/src/{{ repo.name }}/{{ repo.path_in_repo | default('scripts') }}"

- name: Ensure source directory exists for repo
  ansible.builtin.file:
    path: "{{ repo_src_path }}"
    state: directory
    mode: '0755'

- name: Clone or update script repository
  ansible.builtin.git:
    repo: "{{ repo.repo }}"
    dest: "{{ repo_src_path }}"
    version: "{{ repo.version | default('main') }}"
    force: true

# --- Synchronization Logic ---

# 1. Find all executable files that SHOULD exist from the Git repo.
- name: Find all desired executable scripts in repo
  ansible.builtin.find:
    paths: "{{ repo_script_path }}"
    patterns: '*'
    file_type: file
  register: found_desired_scripts
- name: List found script files
  ansible.builtin.debug:
    var: item.path
  loop: "{{ found_desired_scripts.files }}"
  loop_control:
    label: "{{ item.path | basename }}"

- name: Create a list of desired script names
  ansible.builtin.set_fact:
    desired_script_names: "{{ found_desired_scripts.files | map(attribute='path') | map('basename') | list }}"
  when: found_desired_scripts.files | length > 0

# 2. Find all symlinks that CURRENTLY exist in the bin directory.
- name: Find all existing symlinks in bin dir
  ansible.builtin.find:
    paths: "{{ terminal_setup_bin_dir }}"
    file_type: link
    get_checksum: false
  register: found_existing_symlinks

# 3. Filter the existing symlinks to only those managed by THIS repo.
- name: Filter symlinks managed by repo {{ repo.name }}
  ansible.builtin.set_fact:
    managed_symlinks: "{{ found_existing_symlinks.files | selectattr('lnk_target', 'defined') | selectattr('lnk_target', 'startswith', repo_src_path) | list }}"
  failed_when: false

# 4. Prune obsolete symlinks: Delete any link that exists but is no longer in the desired list.
- name: Prune obsolete symlinks for repo {{ repo.name }}
  ansible.builtin.file:
    path: "{{ managed_link.path }}"
    state: absent
  loop: "{{ managed_symlinks }}"
  loop_control:
    loop_var: managed_link
    label: "{{ managed_link.path | basename }}"
  when: (managed_link.path | basename) not in desired_script_names

# 5. Create or update symlinks for all desired scripts.
- name: Link scripts to bin dir for repo
  ansible.builtin.file:
    src: "{{ desired_script.path }}"
    dest: "{{ terminal_setup_bin_dir }}/{{ desired_script.path | basename }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    state: link
    force: true
  loop: "{{ found_desired_scripts.files }}"
  loop_control:
    loop_var: desired_script
    label: "{{ desired_script.path | basename }}"
